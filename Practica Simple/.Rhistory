# Aplicar la prueba de Kolmogorov-Smirnov
ks.test(datos, pnorm, mean(datos), sd(datos))
# Aplicar la prueba de Kolmogorov-Smirnov
ks.test(datos, 'pnorm', mean(datos), sd(datos))
# Aplicar la prueba de Kolmogorov-Smirnov
ks.test(datos, 'pnorm', mean(datos), sd(datos))
#para cálculo de probabilidades acumuladas con la binomial
n <- 10  # Cambia este valor según el número de ensayos que necesites
p <- 0.5
Probabilidad_menor_o_igual_que_x <- pbinom(2, size = n, prob = p,lower.tail = T); Probabilidad_menor_o_igual_que_x
#para cálculo de probabilidades acumuladas con la binomial
n <- 10  # Cambia este valor según el número de ensayos que necesites
p <- 0.5
Probabilidad_mayor_que_x <- 1- pbinom(5, size = n, prob = p,lower.tail = T); Probabilidad_mayor_que_x
Probabilidad_mayor_que_x <- 1- pbinom(5, size = n, prob = pi,lower.tail = T); Probabilidad_mayor_que_x
pi <- 0.5
pi <- 0.5
Probabilidad_mayor_que_x <- 1- pbinom(5, size = n, prob = pi,lower.tail = T); Probabilidad_mayor_que_x
binom.test(negativos,positivos+negativos,p=0,5,alternative = "greater")
#ejemplo1
antes <- c(42, 57, 38, 49, 63, 36, 48, 58, 47, 51, 83, 27)
despues <- c(40, 60, 38, 47, 65, 39, 49, 50, 47, 52, 72, 33)
#ejemplo1
antes <- c(42, 57, 38, 49, 63, 36, 48, 58, 47, 51, 83, 27)
despues <- c(40, 60, 38, 47, 65, 39, 49, 50, 47, 52, 72, 33)
dif<-antes-despues
#cuantificar signos positivos y negativos
positivos<- sum(dif>0)
negativos<- sum(dif<0)
binom.test(negativos,positivos+negativos,p=0,5,alternative = "greater")
binom.test(negativos,positivos+negativos,pi=0,5,alternative = "greater")
#para cálculo de probabilidades acumuladas con la binomial
n <- 10  # Cambia este valor según el número de ensayos que necesites
pi <- 0.5
binom.test(negativos,positivos+negativos,pi=0,5,alternative = "greater")
binom.test(negativos,positivos+negativos,pi=0.5,alternative = "greater")
#para cálculo de probabilidades acumuladas con la binomial
n <- 10  # Cambia este valor según el número de ensayos que necesites
pi <- 0.5
#ejemplo1
antes <- c(42, 57, 38, 49, 63, 36, 48, 58, 47, 51, 83, 27)
despues <- c(40, 60, 38, 47, 65, 39, 49, 50, 47, 52, 72, 33)
dif<-antes-despues
#cuantificar signos positivos y negativos
positivos<- sum(dif>0)
negativos<- sum(dif<0)
binom.test(negativos,positivos+negativos,pi=0.5,alternative = "greater")
#ejemplo1
antes <- c(42, 57, 38, 49, 63, 36, 48, 58, 47, 51, 83, 27)
despues <- c(40, 60, 38, 47, 65, 39, 49, 50, 47, 52, 72, 33)
dif<-antes-despues
#cuantificar signos positivos y negativos
positivos<- sum(dif>0)
negativos<- sum(dif<0)
binom.test(negativos,positivos+negativos,pi=0.5,alternative = "greater")
binom.test(negativos,positivos+negativos,p=0.5,alternative = "greater")
#ejemplo1
antes <- c(42, 57, 38, 49, 63, 36, 48, 58, 47, 51, 83, 27)
despues <- c(40, 60, 38, 47, 65, 39, 49, 50, 47, 52, 72, 33)
dif<-antes-despues
#cuantificar signos positivos y negativos
positivos<- sum(dif>0)
negativos<- sum(dif<0)
binom.test(negativos,positivos+negativos,p=0.5,alternative = "greater")
#ejemplo2
banda_1 <- c(32, 27, 21, 13, 25, 38, 17, 29, 32, 34)
banda_2 <- c(37, 25, 21, 17, 29, 39, 23, 33, 34, 37)
dif<-banda_1-banda_2
# cuantificar signos
positivos<-sum(dif>0)
negativos<-sum(dif<0)
binom.test(positivos,positivos+negativos,p=0.5,alternative = "two.sided")
0.03906/2
positivos<-8
negativos<-28
#binom.test
bimon.test(positivo,negativos+positivos,p=0.5, alternative="two.sided")
negativos<-28
#binom.test
binom.test(positivo,negativos+positivos,p=0.5, alternative="two.sided")
#binom.test
binom.test(positivos,negativos+positivos,p=0.5, alternative="two.sided")
#El fabricante de 10 tipos de alimentos en paquete plantea la hipótesis
#de que las ventas de cada producto con un alto contenido de grasa serán menores
#que las del mismo producto con reducción de grasa. Las ventas en miles de
#unidades aparecen en la siguiente tabla. Al nivel del 10%, ¿cuál es su conclusión?
#a) Planteo de hipótesis
#Ho: No hay diferencia significativa entre productos de alto y bajo contenido graso
#H1: Las ventas de productos con alto contenido graso seran siginifiactivamente menores
#que los productos con bajo contenido graso
#del mismo producto con reducción de grasa
#b) Tamaño de muestra efectivo y nivel de significancia
Con_grasa <- c(10,12,14,18,17,18,5,21,6,8)
Sin_grasa <- c(15,13,12,9,17,19,3,27,12,14)
dif <- Con_grasa - Sin_grasa
positivos <- sum(dif>0)
negativos <- sum(dif<0)
n <- positivos + negativos
alpha <- 0.10
#c) Calcular el P-valor
binom.test(positivos, negativos+positivos, p=alpha, alternative = "less")
#c) Calcular el P-valor
binom.test(negativos, negativos+positivos, p=alpha, alternative = "less")
0.001193/2
positivos<-8
negativos<-28
# tamaño de muestra
n<- positivos+negativos
Zc<- (positivos +0.5-0.5*n)/(0.5*sqrt(n))
z_critico<-qnorm(0.05)
if(abs(Zc) > abs(z_critico) {
} else{
}
}
if(abs(Zc) > abs(z_critico)) {
cat("Se recheza la hipotesis nula")
} else{
cat(" mo se rechaza la hipotesis nula")
}
# --- Parámetros de la Distribución ---
media_dias <- 5
desv_est_dias <- 1.2
# --- Parámetros de la Distribución ---
media_dias <- 5
desv_est_dias <- 1.2
# Definir un rango de valores para el eje X (tiempo en días)
# Usualmente, media +/- 3 o 4 desviaciones estándar es suficiente para ver la curva
x_min <- media_dias - 4 * desv_est_dias
x_max <- media_dias + 4 * desv_est_dias
# Crear una secuencia de puntos en el eje X para dibujar la curva
dias <- seq(x_min, x_max, length.out = 400) # 400 puntos para una curva suave
# Calcular la densidad de probabilidad para cada punto usando dnorm()
# dnorm(x, mean, sd) da la altura de la curva normal en el punto x
densidad <- dnorm(dias, mean = media_dias, sd = desv_est_dias)
# Crear el gráfico
plot(dias, densidad, type = "l", # "l" para tipo línea
main = "Distribución del Tiempo de Entrega de Pedidos",
xlab = "Tiempo de Entrega (días)",
ylab = "Densidad de Probabilidad",
lwd = 2, # Grosor de la línea
col = "steelblue", # Color de la línea
ylim = c(0, max(densidad) * 1.1)) # Ajustar límite Y para que se vea bien
# Parámetros de la distribución
media <- 5
sd <- 1.2
# 1. Gráfico Básico
# Usamos 'curve' para graficar directamente la función de densidad dnorm
curve(dnorm(x, mean = media, sd = sd),
from = media - 4*sd, # Rango desde media - 4*DE
to = media + 4*sd,   # Hasta media + 4*DE
main = "Distribución Tiempo de Entrega",
xlab = "Días",
ylab = "Densidad",
lwd = 2,             # Grosor de línea
col = "blue")        # Color de línea
# 2. Probabilidad de tardar MÁS de 6 días: P(X > 6)
prob_mayor_6 <- pnorm(6, mean = media, sd = sd, lower.tail = FALSE)
print(paste("P(X > 6) =", round(prob_mayor_6, 4)))
# 3. Probabilidad de tardar MENOS de 4 días: P(X < 4)
prob_menor_4 <- pnorm(4, mean = media, sd = sd) # lower.tail=TRUE es por defecto
print(paste("P(X < 4) =", round(prob_menor_4, 4)))
# 4. Probabilidad de tardar ENTRE 4.5 y 6 días: P(4.5 < X < 6)
prob_entre_4_5_y_6 <- pnorm(6, mean = media, sd = sd) - pnorm(4.5, mean = media, sd = sd)
print(paste("P(4.5 < X < 6) =", round(prob_entre_4_5_y_6, 4)))
# 5. Tiempo garantizado para el 95%: Percentil 95
tiempo_95_percentil <- qnorm(0.95, mean = media, sd = sd)
print(paste("Tiempo para cubrir el 95% =", round(tiempo_95_percentil, 2), "días"))
install.packages("randtests")
#Datos numericos
datos<- 31, 57, 52, 22, 24, 59, 25, 29, 27, 44, 43, 32, 40, 37, 60
install.packages("randtests")
library(randtests)
runs.test(datos)
#Datos numericos
datos <- 31, 57, 52, 22, 24, 59, 25, 29, 27, 44, 43, 32, 40, 37, 60
#Datos numericos
datos <- c(31, 57, 52, 22, 24, 59, 25, 29, 27, 44, 43, 32, 40, 37, 60)
runs.test(datos)
#Ejercicio 1
#ho=
#H1=
#Guardamos los datos
metodo1 <- c(27, 31, 28, 29, 39, 40, 35, 33, 32, 36, 37, 43)
metodo2 <- c(34, 24, 38, 28, 30, 34, 37, 42, 41, 44)
#Aplicamos la prueba
wilcox.test(metodo1, metodo2, alternative = "two.sided", correct = FALSE)
#Aplicamos la prueba
wilcox.test(metodo1, metodo2, alternative = "two.sided", correct = F)
#Ejercicio 1
#ho=
#H1=
#Guardamos los datos
metodo1 <- c(27, 31, 28, 29, 39, 40, 35, 33, 32, 36, 37, 43)
metodo2 <- c(34, 24, 38, 28, 30, 34, 37, 42, 41, 44)
#Aplicamos la prueba
wilcox.test(metodo1, metodo2, alternative = "two.sided", correct = F)
#Ejercicio 1
#Guardamos los datos
metodo1 <- c(27, 31, 28, 29, 39, 40, 35, 33, 32, 36, 37, 43)
metodo2 <- c(34, 24, 38, 28, 30, 34, 37, 42, 41, 44)
#Aplicamos la prueba
wilcox.test(metodo1, metodo2, alternative = "two.sided", correct = F)
Combustible1 <- c(45,67,54,41,38,59,48,31,59,31)
Combustible1 <- c(45,67,54,41,38,59,48,31,59,31)
Combustible2 <- c(79,82,69,84,76,77,81,65,73,70,69)
#Estadistico de prueba
resultado <- wilcox.test(Combustible1,Combustible2,alternative ="twosided", correct= F)
Combustible1 <- c(45,67,54,41,38,59,48,31,59,31)
Combustible2 <- c(79,82,69,84,76,77,81,65,73,70,69)
#Estadistico de prueba
resultado <- wilcox.test(Combustible1,Combustible2,alternative ="two.sided", correct= F)
print(resultado)
#Ejercicio 3
# a)Vectores de datos
tiempo= c(21,18,15,17,18,25,18,4,6,5)
nota= c(67,58,59,54,58,80,14,15,19,21)
# b) Explora los datos originales y rangos con plot
plot(tiempo,nota,main = "Dispersión entre tiempo de estudio y nota en el examen",col="red",pch=19)
rangotiempo= rank(tiempo)
rangonota= rank(nota)
plot(rangotiempo,rangonota,main = "Gráfico de rangos",xlab = "Rango (tiempo)",ylab = "Rango (nota)", pch=19)
# c) Calcular rho
rho= cor(tiempo, nota, method = "spearman"); rho
# e) Plantea las hipotesis y realiza la prueba
#Ho: No existe relación entre el tiempo de estudio y las notas en el examen. (p=0)
#H1: Sí existe relación entre el tiempo de estudio y las notas en el examen; (p!=0)
prueba= cor.test(tiempo, nota, method = "spearman"); prueba
# b) Explora los datos originales y rangos con plot
plot(tiempo,nota,main = "Dispersión entre tiempo de estudio y nota en el examen",col="red",pch=19)
Código Ejemplo 1
cliente_1 <- c(28, 19, 13, 28, 29, 22, 21)
cliente_2 <- c(26, 20, 11, 14, 22, 21)
cliente_3 <- c(37, 28, 26, 35, 31)
Código Ejemplo 1
cliente_1 <- c(28, 19, 13, 28, 29, 22, 21)
cliente_2 <- c(26, 20, 11, 14, 22, 21)
cliente_3 <- c(37, 28, 26, 35, 31)
datos_deuda <- data.frame(
tiempo = c(cliente_1, cliente_2, cliente_3),
grupo = factor(rep(c("Cliente_1", "Cliente_2", "Cliente_3"),
times = c(7, 6, 5)))
)
print(datos_deuda)
kruskal_result <- kruskal.test(tiempo ~ grupo, data = datos_deuda)
print(kruskal_result)
pairwise.wilcox.test(datos_deuda$tiempo, datos_deuda$grupo,
p.adjust.method = "holm",exact=T)
cliente_1 <- c(28, 19, 13, 28, 29, 22, 21)
cliente_2 <- c(26, 20, 11, 14, 22, 21)
cliente_3 <- c(37, 28, 26, 35, 31)
datos_deuda <- data.frame(
tiempo = c(cliente_1, cliente_2, cliente_3),
grupo = factor(rep(c("Cliente_1", "Cliente_2", "Cliente_3"),
times = c(7, 6, 5)))
)
print(datos_deuda)
kruskal_result <- kruskal.test(tiempo ~ grupo, data = datos_deuda)
print(kruskal_result)
---
title: "Basic Example"
library(mrgsolve)
#library(mrgsolve)
library(ggplot2)
library(dplyr)
data_path <- file.path("C://Users/ruben/Documents/2025/Univalle/2025-2/Practicas/VideoJuegos")
data_file <- file.path(data_path, "vgsales.csv")
data.vg.raw <- read.csv(data_file,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
setwd("~/Library/CloudStorage/OneDrive-UniversidadPrivadadelValle/EstR")
setwd("~/Library/CloudStorage/OneDrive-UniversidadPrivadadelValle/EstR")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
#Archivo Kaggle - vgsales
vgventas <- read.csv("vgsales.csv",
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(vgventas)
str(vgventas)
vgventas$Year <- as.integer(vgventas$Year)
vgventas$Genre <- as.factor(vgventas$Genre)
vgventas$Platform <- as.factor(vgventas$Platform)
vgventas$Publisher <- as.factor(vgventas$Publisher)
summary(vgventas)
str(vgventas)
unique(vgventas$Year)
filter(vgventas, Year=="N/A")
unique(vgventas$Platform)
filter(vgventas, Name=="FIFA 15")
hist(vgventas$NA_Sales )
vgventas %>%
group_by(Genre) %>%
summarise(Ventas_Totales = sum(Global_Sales)) %>%
arrange(desc(Ventas_Totales)) %>%
head(5)
# Contar NA por columna
na_por_columna <- colSums(is.na(vgventas))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(vgventas)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
unique(vgventas$Publisher)
filter(vgventas, Publisher==" ")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(vgventas)
cat("Filas originales:", nrow(vgventas), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(vgventas)
print("Con na.omit():")
print(df_sin_na)
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- vgventas[complete.cases(vgventas), ]
print("Con complete.cases():")
print(df_completo)
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
unique(vgventas$Platform)
df <- filter(vgventas,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Año",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
# Extraer una muestra aleatoria de 300 datos
set.seed(123)
muestra <- vgventas %>% sample_n(300)
# Calcular la media y desviación estándar de las variables numéricas (población)
estadisticas_poblacion <- vgventas %>%
summarise_if(is.numeric, list(
media = mean,
desviacion = sd
), na.rm = TRUE)
# Calcular la media y desviación estándar de las variables numéricas (muestra)
estadisticas_muestra <- muestra %>%
summarise_if(is.numeric, list(
media = mean,
desviacion = sd
), na.rm = TRUE)
# Comparar ambas
comparacion <- bind_rows(
Poblacion = estadisticas_poblacion,
Muestra = estadisticas_muestra,
.id = "Origen"
)
# Mostrar la comparación
print(comparacion)
setwd("~/Library/CloudStorage/OneDrive-UniversidadPrivadadelValle/EstR/Unidad1")
setwd("~/Library/CloudStorage/OneDrive-UniversidadPrivadadelValle/EstR/Unidad1/Practica Simple")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
#Archivo Kaggle - vgsales
vgventas <- read.csv("vgsales.csv",
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(vgventas)
str(vgventas)
vgventas$Year <- as.integer(vgventas$Year)
vgventas$Genre <- as.factor(vgventas$Genre)
vgventas$Platform <- as.factor(vgventas$Platform)
vgventas$Publisher <- as.factor(vgventas$Publisher)
summary(vgventas)
str(vgventas)
unique(vgventas$Year)
filter(vgventas, Year=="N/A")
unique(vgventas$Platform)
filter(vgventas, Name=="FIFA 15")
hist(vgventas$NA_Sales )
vgventas %>%
group_by(Genre) %>%
summarise(Ventas_Totales = sum(Global_Sales)) %>%
arrange(desc(Ventas_Totales)) %>%
head(5)
# Contar NA por columna
na_por_columna <- colSums(is.na(vgventas))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(vgventas)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
unique(vgventas$Publisher)
filter(vgventas, Publisher==" ")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(vgventas)
cat("Filas originales:", nrow(vgventas), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(vgventas)
print("Con na.omit():")
print(df_sin_na)
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- vgventas[complete.cases(vgventas), ]
print("Con complete.cases():")
print(df_completo)
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
unique(vgventas$Platform)
df <- filter(vgventas,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Año",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
# Extraer una muestra aleatoria de 300 datos
set.seed(123)
muestra <- vgventas %>% sample_n(300)
# Calcular la media y desviación estándar de las variables numéricas (población)
estadisticas_poblacion <- vgventas %>%
summarise_if(is.numeric, list(
media = mean,
desviacion = sd
), na.rm = TRUE)
# Calcular la media y desviación estándar de las variables numéricas (muestra)
estadisticas_muestra <- muestra %>%
summarise_if(is.numeric, list(
media = mean,
desviacion = sd
), na.rm = TRUE)
# Comparar ambas
comparacion <- bind_rows(
Poblacion = estadisticas_poblacion,
Muestra = estadisticas_muestra,
.id = "Origen"
)
# Mostrar la comparación
print(comparacion)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
#Archivo Kaggle - vgsales
vgventas <- read.csv("vgsales.csv",
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(vgventas)
str(vgventas)
vgventas$Year <- as.integer(vgventas$Year)
vgventas$Genre <- as.factor(vgventas$Genre)
vgventas$Platform <- as.factor(vgventas$Platform)
vgventas$Publisher <- as.factor(vgventas$Publisher)
summary(vgventas)
str(vgventas)
unique(vgventas$Year)
filter(vgventas, Year=="N/A")
unique(vgventas$Platform)
filter(vgventas, Name=="FIFA 15")
hist(vgventas$NA_Sales )
vgventas %>%
group_by(Genre) %>%
summarise(Ventas_Totales = sum(Global_Sales)) %>%
arrange(desc(Ventas_Totales)) %>%
head(5)
# Contar NA por columna
na_por_columna <- colSums(is.na(vgventas))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(vgventas)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
unique(vgventas$Publisher)
filter(vgventas, Publisher==" ")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
head(vgventas)
cat("Filas originales:", nrow(vgventas), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(vgventas)
print("Con na.omit():")
head(df_sin_na)
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- vgventas[complete.cases(vgventas), ]
print("Con complete.cases():")
head(df_completo)
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
unique(vgventas$Platform)
df <- filter(vgventas,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Año",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
# Extraer una muestra aleatoria de 300 datos
set.seed(123)
muestra <- vgventas %>% sample_n(300)
# Calcular la media y desviación estándar de las variables numéricas (población)
estadisticas_poblacion <- vgventas %>%
summarise_if(is.numeric, list(
media = mean,
desviacion = sd
), na.rm = TRUE)
# Calcular la media y desviación estándar de las variables numéricas (muestra)
estadisticas_muestra <- muestra %>%
summarise_if(is.numeric, list(
media = mean,
desviacion = sd
), na.rm = TRUE)
# Comparar ambas
comparacion <- bind_rows(
Poblacion = estadisticas_poblacion,
Muestra = estadisticas_muestra,
.id = "Origen"
)
# Mostrar la comparación
print(comparacion)
